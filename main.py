from turtle import *
from j_clock import Clock

class Kattintgato:

    scr = Screen()
    t = Turtle()
    t2 = Turtle()
    t3 = Turtle()
    t4 = Turtle()
    t5 = Turtle()
    t6 = Turtle()
    t7 = Turtle()
    t8 = Turtle()
    t9 = Turtle()
    t10 = Turtle()
    c = Clock(scr)

    def asd(self, fill:bool):
        xA = self.t.xcor()
        yA = self.t.ycor()
        rotA = self.t.heading()
        self.t.penup()
        self.t.forward(-7)
        self.t.right(90)
        self.t.forward(5)
        self.t.left(90)
        self.t.forward(80)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        if fill:
            self.t.end_fill()
        self.t.penup()
        self.t.goto(xA, yA)
        self.t.setheading(rotA)
        self.t.pendown()

    def asdB(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.setheading(-90)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xB = self.t.xcor()
        yB = self.t.ycor()
        rotB = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xB, yB)
        self.t.pendown()
        self.t.setheading(rotB)

    def asdC(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.setheading(-90)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xC = self.t.xcor()
        yC = self.t.ycor()
        rotC = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xC, yC)
        self.t.pendown()
        self.t.setheading(rotC)

    def asdD(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.forward(5)
        self.t.setheading(180)
        self.t.forward(15)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xD = self.t.xcor()
        yD = self.t.ycor()
        rotD = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xD, yD)
        self.t.pendown()
        self.t.setheading(rotD)

    def asdE(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.forward(5)
        self.t.setheading(90)
        self.t.forward(15)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xE = self.t.xcor()
        yE = self.t.ycor()
        rotE = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xE, yE)
        self.t.pendown()
        self.t.setheading(rotE)

    def asdF(self, fill:bool):
        self.t.penup()
        self.t.forward(20)
        self.t.forward(80)
        self.t.setheading(90)
        self.t.forward(-3)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xF = self.t.xcor()
        yF = self.t.ycor()
        rotF = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xF, yF)
        self.t.pendown()
        self.t.setheading(rotF)

    def asdG(self, fill:bool):
        self.t.penup()
        self.t.setheading(0)
        self.t.forward(-5)
        self.t.setheading(-90)
        self.t.forward(15)
        self.t.setheading(0)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xF = self.t.xcor()
        yF = self.t.ycor()
        rotF = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xF, yF)
        self.t.pendown()
        self.t.setheading(rotF)



    def asd1(self, fill:bool):
        xA = self.t2.xcor()
        yA = self.t2.ycor()
        rot2A = self.t2.heading()
        self.t2.penup()
        self.t2.forward(-7)
        self.t2.right(90)
        self.t2.forward(5)
        self.t2.left(90)
        self.t2.forward(80)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        if fill:
            self.t2.end_fill()
        self.t2.penup()
        self.t2.goto(xA, yA)
        self.t2.setheading(rot2A)
        self.t2.pendown()

    def asdB1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.setheading(-90)
        self.t2.forward(20)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xB = self.t2.xcor()
        yB = self.t2.ycor()
        rot2B = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xB, yB)
        self.t2.pendown()
        self.t2.setheading(rot2B)

    def asdC1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.setheading(-90)
        self.t2.forward(20)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xC = self.t2.xcor()
        yC = self.t2.ycor()
        rot2C = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xC, yC)
        self.t2.pendown()
        self.t2.setheading(rot2C)

    def asdD1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.forward(5)
        self.t2.setheading(180)
        self.t2.forward(15)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xD = self.t2.xcor()
        yD = self.t2.ycor()
        rot2D = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xD, yD)
        self.t2.pendown()
        self.t2.setheading(rot2D)

    def asdE1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.forward(5)
        self.t2.setheading(90)
        self.t2.forward(15)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xE = self.t2.xcor()
        yE = self.t2.ycor()
        rot2E = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xE, yE)
        self.t2.pendown()
        self.t2.setheading(rot2E)

    def asdF1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(20)
        self.t2.forward(80)
        self.t2.setheading(90)
        self.t2.forward(-3)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xF = self.t2.xcor()
        yF = self.t2.ycor()
        rot2F = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xF, yF)
        self.t2.pendown()
        self.t2.setheading(rot2F)

    def asdG1(self, fill:bool):
        self.t2.penup()
        self.t2.setheading(0)
        self.t2.forward(-5)
        self.t2.setheading(-90)
        self.t2.forward(15)
        self.t2.setheading(0)
        self.t2.forward(20)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xF = self.t2.xcor()
        yF = self.t2.ycor()
        rot2F = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xF, yF)
        self.t2.pendown()
        self.t2.setheading(rot2F)

    def asd2(self, fill: bool):
        xA = self.t5.xcor()
        yA = self.t5.ycor()
        rot2A = self.t5.heading()
        self.t5.penup()
        self.t5.forward(-7)
        self.t5.right(90)
        self.t5.forward(5)
        self.t5.left(90)
        self.t5.forward(80)
        self.t5.pendown()
        if fill:
            self.t5.begin_fill()
        self.t5.left(135)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.left(90)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        if fill:
            self.t5.end_fill()
        self.t5.penup()
        self.t5.goto(xA, yA)
        self.t5.setheading(rot2A)
        self.t5.pendown()

    def asdB2(self, fill: bool):
        self.t5.penup()
        self.t5.forward(80)
        self.t5.setheading(-90)
        self.t5.forward(20)
        self.t5.pendown()
        if fill:
            self.t5.begin_fill()
        xB = self.t5.xcor()
        yB = self.t5.ycor()
        rot2B = self.t5.heading()
        self.t5.penup()
        self.t5.forward(80)
        self.t5.pendown()
        self.t5.left(135)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.left(90)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.penup()
        if fill:
            self.t5.end_fill()
        self.t5.goto(xB, yB)
        self.t5.pendown()
        self.t5.setheading(rot2B)

    def asdC2(self, fill: bool):
        self.t5.penup()
        self.t5.forward(80)
        self.t5.setheading(-90)
        self.t5.forward(20)
        self.t5.pendown()
        if fill:
            self.t5.begin_fill()
        xC = self.t5.xcor()
        yC = self.t5.ycor()
        rot2C = self.t5.heading()
        self.t5.penup()
        self.t5.forward(80)
        self.t5.pendown()
        self.t5.left(135)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.left(90)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.penup()
        if fill:
            self.t5.end_fill()
        self.t5.goto(xC, yC)
        self.t5.pendown()
        self.t5.setheading(rot2C)

    def asdD2(self, fill: bool):
        self.t5.penup()
        self.t5.forward(80)
        self.t5.forward(5)
        self.t5.setheading(180)
        self.t5.forward(15)
        self.t5.pendown()
        if fill:
            self.t5.begin_fill()
        xD = self.t5.xcor()
        yD = self.t5.ycor()
        rot2D = self.t5.heading()
        self.t5.penup()
        self.t5.forward(80)
        self.t5.pendown()
        self.t5.left(135)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.left(90)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.penup()
        if fill:
            self.t5.end_fill()
        self.t5.goto(xD, yD)
        self.t5.pendown()
        self.t5.setheading(rot2D)

    def asdE2(self, fill: bool):
        self.t5.penup()
        self.t5.forward(80)
        self.t5.forward(5)
        self.t5.setheading(90)
        self.t5.forward(15)
        self.t5.pendown()
        if fill:
            self.t5.begin_fill()
        xE = self.t5.xcor()
        yE = self.t5.ycor()
        rot2E = self.t5.heading()
        self.t5.penup()
        self.t5.forward(80)
        self.t5.pendown()
        self.t5.left(135)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.left(90)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.penup()
        if fill:
            self.t5.end_fill()
        self.t5.goto(xE, yE)
        self.t5.pendown()
        self.t5.setheading(rot2E)

    def asdF2(self, fill: bool):
        self.t5.penup()
        self.t5.forward(20)
        self.t5.forward(80)
        self.t5.setheading(90)
        self.t5.forward(-3)
        self.t5.pendown()
        if fill:
            self.t5.begin_fill()
        xF = self.t5.xcor()
        yF = self.t5.ycor()
        rot2F = self.t5.heading()
        self.t5.penup()
        self.t5.forward(80)
        self.t5.pendown()
        self.t5.left(135)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.left(90)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.penup()
        if fill:
            self.t5.end_fill()
        self.t5.goto(xF, yF)
        self.t5.pendown()
        self.t5.setheading(rot2F)

    def asdG2(self, fill: bool):
        self.t5.penup()
        self.t5.setheading(0)
        self.t5.forward(-5)
        self.t5.setheading(-90)
        self.t5.forward(15)
        self.t5.setheading(0)
        self.t5.forward(20)
        self.t5.pendown()
        if fill:
            self.t5.begin_fill()
        xF = self.t5.xcor()
        yF = self.t2.ycor()
        rot2F = self.t5.heading()
        self.t5.penup()
        self.t5.forward(80)
        self.t5.pendown()
        self.t5.left(135)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.left(90)
        self.t5.forward(20)
        self.t5.left(45)
        self.t5.forward(60)
        self.t5.left(45)
        self.t5.forward(20)
        self.t5.penup()
        if fill:
            self.t5.end_fill()
        self.t5.goto(xF, yF)
        self.t5.pendown()
        self.t5.setheading(rot2F)


    def asd3(self, fill: bool):
        xA = self.t6.xcor()
        yA = self.t6.ycor()
        rot2A = self.t6.heading()
        self.t6.penup()
        self.t6.forward(-7)
        self.t6.right(90)
        self.t6.forward(5)
        self.t6.left(90)
        self.t6.forward(80)
        self.t6.pendown()
        if fill:
            self.t6.begin_fill()
        self.t6.left(135)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.left(90)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        if fill:
            self.t6.end_fill()
        self.t6.penup()
        self.t6.goto(xA, yA)
        self.t6.setheading(rot2A)
        self.t6.pendown()

    def asdB3(self, fill: bool):
        self.t6.penup()
        self.t6.forward(80)
        self.t6.setheading(-90)
        self.t6.forward(20)
        self.t6.pendown()
        if fill:
            self.t6.begin_fill()
        xB = self.t6.xcor()
        yB = self.t6.ycor()
        rot2B = self.t6.heading()
        self.t6.penup()
        self.t6.forward(80)
        self.t6.pendown()
        self.t6.left(135)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.left(90)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.penup()
        if fill:
            self.t6.end_fill()
        self.t6.goto(xB, yB)
        self.t6.pendown()
        self.t6.setheading(rot2B)

    def asdC3(self, fill: bool):
        self.t6.penup()
        self.t6.forward(80)
        self.t6.setheading(-90)
        self.t6.forward(20)
        self.t6.pendown()
        if fill:
            self.t6.begin_fill()
        xC = self.t6.xcor()
        yC = self.t6.ycor()
        rot2C = self.t6.heading()
        self.t6.penup()
        self.t6.forward(80)
        self.t6.pendown()
        self.t6.left(135)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.left(90)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.penup()
        if fill:
            self.t6.end_fill()
        self.t6.goto(xC, yC)
        self.t6.pendown()
        self.t6.setheading(rot2C)

    def asdD3(self, fill: bool):
        self.t6.penup()
        self.t6.forward(80)
        self.t6.forward(5)
        self.t6.setheading(180)
        self.t6.forward(15)
        self.t6.pendown()
        if fill:
            self.t6.begin_fill()
        xD = self.t6.xcor()
        yD = self.t6.ycor()
        rot2D = self.t6.heading()
        self.t6.penup()
        self.t6.forward(80)
        self.t6.pendown()
        self.t6.left(135)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.left(90)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.penup()
        if fill:
            self.t6.end_fill()
        self.t6.goto(xD, yD)
        self.t6.pendown()
        self.t6.setheading(rot2D)

    def asdE3(self, fill: bool):
        self.t6.penup()
        self.t6.forward(80)
        self.t6.forward(5)
        self.t6.setheading(90)
        self.t6.forward(15)
        self.t6.pendown()
        if fill:
            self.t6.begin_fill()
        xE = self.t6.xcor()
        yE = self.t6.ycor()
        rot2E = self.t6.heading()
        self.t6.penup()
        self.t6.forward(80)
        self.t6.pendown()
        self.t6.left(135)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.left(90)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.penup()
        if fill:
            self.t6.end_fill()
        self.t6.goto(xE, yE)
        self.t6.pendown()
        self.t6.setheading(rot2E)

    def asdF3(self, fill: bool):
        self.t6.penup()
        self.t6.forward(20)
        self.t6.forward(80)
        self.t6.setheading(90)
        self.t6.forward(-3)
        self.t6.pendown()
        if fill:
            self.t6.begin_fill()
        xF = self.t6.xcor()
        yF = self.t6.ycor()
        rot2F = self.t6.heading()
        self.t6.penup()
        self.t6.forward(80)
        self.t6.pendown()
        self.t6.left(135)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.left(90)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.penup()
        if fill:
            self.t6.end_fill()
        self.t6.goto(xF, yF)
        self.t6.pendown()
        self.t6.setheading(rot2F)

    def asdG3(self, fill: bool):
        self.t6.penup()
        self.t6.setheading(0)
        self.t6.forward(-5)
        self.t6.setheading(-90)
        self.t6.forward(15)
        self.t6.setheading(0)
        self.t6.forward(20)
        self.t6.pendown()
        if fill:
            self.t6.begin_fill()
        xF = self.t6.xcor()
        yF = self.t2.ycor()
        rot2F = self.t6.heading()
        self.t6.penup()
        self.t6.forward(80)
        self.t6.pendown()
        self.t6.left(135)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.left(90)
        self.t6.forward(20)
        self.t6.left(45)
        self.t6.forward(60)
        self.t6.left(45)
        self.t6.forward(20)
        self.t6.penup()
        if fill:
            self.t6.end_fill()
        self.t6.goto(xF, yF)
        self.t6.pendown()
        self.t6.setheading(rot2F)

    def asd4(self, fill: bool):
        xA = self.t9.xcor()
        yA = self.t9.ycor()
        rot2A = self.t9.heading()
        self.t9.penup()
        self.t9.forward(-7)
        self.t9.right(90)
        self.t9.forward(5)
        self.t9.left(90)
        self.t9.forward(80)
        self.t9.pendown()
        if fill:
            self.t9.begin_fill()
        self.t9.left(135)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.left(90)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        if fill:
            self.t9.end_fill()
        self.t9.penup()
        self.t9.goto(xA, yA)
        self.t9.setheading(rot2A)
        self.t9.pendown()

    def asdB4(self, fill: bool):
        self.t9.penup()
        self.t9.forward(80)
        self.t9.setheading(-90)
        self.t9.forward(20)
        self.t9.pendown()
        if fill:
            self.t9.begin_fill()
        xB = self.t9.xcor()
        yB = self.t9.ycor()
        rot2B = self.t9.heading()
        self.t9.penup()
        self.t9.forward(80)
        self.t9.pendown()
        self.t9.left(135)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.left(90)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.penup()
        if fill:
            self.t9.end_fill()
        self.t9.goto(xB, yB)
        self.t9.pendown()
        self.t9.setheading(rot2B)

    def asdC4(self, fill: bool):
        self.t9.penup()
        self.t9.forward(80)
        self.t9.setheading(-90)
        self.t9.forward(20)
        self.t9.pendown()
        if fill:
            self.t9.begin_fill()
        xC = self.t9.xcor()
        yC = self.t9.ycor()
        rot2C = self.t9.heading()
        self.t9.penup()
        self.t9.forward(80)
        self.t9.pendown()
        self.t9.left(135)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.left(90)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.penup()
        if fill:
            self.t9.end_fill()
        self.t9.goto(xC, yC)
        self.t9.pendown()
        self.t9.setheading(rot2C)

    def asdD4(self, fill: bool):
        self.t9.penup()
        self.t9.forward(80)
        self.t9.forward(5)
        self.t9.setheading(180)
        self.t9.forward(15)
        self.t9.pendown()
        if fill:
            self.t9.begin_fill()
        xD = self.t9.xcor()
        yD = self.t9.ycor()
        rot2D = self.t9.heading()
        self.t9.penup()
        self.t9.forward(80)
        self.t9.pendown()
        self.t9.left(135)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.left(90)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.penup()
        if fill:
            self.t9.end_fill()
        self.t9.goto(xD, yD)
        self.t9.pendown()
        self.t9.setheading(rot2D)

    def asdE4(self, fill: bool):
        self.t9.penup()
        self.t9.forward(80)
        self.t9.forward(5)
        self.t9.setheading(90)
        self.t9.forward(15)
        self.t9.pendown()
        if fill:
            self.t9.begin_fill()
        xE = self.t9.xcor()
        yE = self.t9.ycor()
        rot2E = self.t9.heading()
        self.t9.penup()
        self.t9.forward(80)
        self.t9.pendown()
        self.t9.left(135)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.left(90)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.penup()
        if fill:
            self.t9.end_fill()
        self.t9.goto(xE, yE)
        self.t9.pendown()
        self.t9.setheading(rot2E)

    def asdF4(self, fill: bool):
        self.t9.penup()
        self.t9.forward(20)
        self.t9.forward(80)
        self.t9.setheading(90)
        self.t9.forward(-3)
        self.t9.pendown()
        if fill:
            self.t9.begin_fill()
        xF = self.t9.xcor()
        yF = self.t9.ycor()
        rot2F = self.t9.heading()
        self.t9.penup()
        self.t9.forward(80)
        self.t9.pendown()
        self.t9.left(135)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.left(90)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.penup()
        if fill:
            self.t9.end_fill()
        self.t9.goto(xF, yF)
        self.t9.pendown()
        self.t9.setheading(rot2F)

    def asdG4(self, fill: bool):
        self.t9.penup()
        self.t9.setheading(0)
        self.t9.forward(-5)
        self.t9.setheading(-90)
        self.t9.forward(15)
        self.t9.setheading(0)
        self.t9.forward(20)
        self.t9.pendown()
        if fill:
            self.t9.begin_fill()
        xF = self.t9.xcor()
        yF = self.t2.ycor()
        rot2F = self.t9.heading()
        self.t9.penup()
        self.t9.forward(80)
        self.t9.pendown()
        self.t9.left(135)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.left(90)
        self.t9.forward(20)
        self.t9.left(45)
        self.t9.forward(60)
        self.t9.left(45)
        self.t9.forward(20)
        self.t9.penup()
        if fill:
            self.t9.end_fill()
        self.t9.goto(xF, yF)
        self.t9.pendown()
        self.t9.setheading(rot2F)

    def asd5(self, fill: bool):
        xA = self.t10.xcor()
        yA = self.t10.ycor()
        rot2A = self.t10.heading()
        self.t10.penup()
        self.t10.forward(-7)
        self.t10.right(90)
        self.t10.forward(5)
        self.t10.left(90)
        self.t10.forward(80)
        self.t10.pendown()
        if fill:
            self.t10.begin_fill()
        self.t10.left(135)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.left(90)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        if fill:
            self.t10.end_fill()
        self.t10.penup()
        self.t10.goto(xA, yA)
        self.t10.setheading(rot2A)
        self.t10.pendown()

    def asdB5(self, fill: bool):
        self.t10.penup()
        self.t10.forward(80)
        self.t10.setheading(-90)
        self.t10.forward(20)
        self.t10.pendown()
        if fill:
            self.t10.begin_fill()
        xB = self.t10.xcor()
        yB = self.t10.ycor()
        rot2B = self.t10.heading()
        self.t10.penup()
        self.t10.forward(80)
        self.t10.pendown()
        self.t10.left(135)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.left(90)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.penup()
        if fill:
            self.t10.end_fill()
        self.t10.goto(xB, yB)
        self.t10.pendown()
        self.t10.setheading(rot2B)

    def asdC5(self, fill: bool):
        self.t10.penup()
        self.t10.forward(80)
        self.t10.setheading(-90)
        self.t10.forward(20)
        self.t10.pendown()
        if fill:
            self.t10.begin_fill()
        xC = self.t10.xcor()
        yC = self.t10.ycor()
        rot2C = self.t10.heading()
        self.t10.penup()
        self.t10.forward(80)
        self.t10.pendown()
        self.t10.left(135)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.left(90)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.penup()
        if fill:
            self.t10.end_fill()
        self.t10.goto(xC, yC)
        self.t10.pendown()
        self.t10.setheading(rot2C)

    def asdD5(self, fill: bool):
        self.t10.penup()
        self.t10.forward(80)
        self.t10.forward(5)
        self.t10.setheading(180)
        self.t10.forward(15)
        self.t10.pendown()
        if fill:
            self.t10.begin_fill()
        xD = self.t10.xcor()
        yD = self.t10.ycor()
        rot2D = self.t10.heading()
        self.t10.penup()
        self.t10.forward(80)
        self.t10.pendown()
        self.t10.left(135)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.left(90)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.penup()
        if fill:
            self.t10.end_fill()
        self.t10.goto(xD, yD)
        self.t10.pendown()
        self.t10.setheading(rot2D)

    def asdE5(self, fill: bool):
        self.t10.penup()
        self.t10.forward(80)
        self.t10.forward(5)
        self.t10.setheading(90)
        self.t10.forward(15)
        self.t10.pendown()
        if fill:
            self.t10.begin_fill()
        xE = self.t10.xcor()
        yE = self.t10.ycor()
        rot2E = self.t10.heading()
        self.t10.penup()
        self.t10.forward(80)
        self.t10.pendown()
        self.t10.left(135)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.left(90)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.penup()
        if fill:
            self.t10.end_fill()
        self.t10.goto(xE, yE)
        self.t10.pendown()
        self.t10.setheading(rot2E)

    def asdF5(self, fill: bool):
        self.t10.penup()
        self.t10.forward(20)
        self.t10.forward(80)
        self.t10.setheading(90)
        self.t10.forward(-3)
        self.t10.pendown()
        if fill:
            self.t10.begin_fill()
        xF = self.t10.xcor()
        yF = self.t10.ycor()
        rot2F = self.t10.heading()
        self.t10.penup()
        self.t10.forward(80)
        self.t10.pendown()
        self.t10.left(135)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.left(90)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.penup()
        if fill:
            self.t10.end_fill()
        self.t10.goto(xF, yF)
        self.t10.pendown()
        self.t10.setheading(rot2F)

    def asdG5(self, fill: bool):
        self.t10.penup()
        self.t10.setheading(0)
        self.t10.forward(-5)
        self.t10.setheading(-90)
        self.t10.forward(15)
        self.t10.setheading(0)
        self.t10.forward(20)
        self.t10.pendown()
        if fill:
            self.t10.begin_fill()
        xF = self.t10.xcor()
        yF = self.t2.ycor()
        rot2F = self.t10.heading()
        self.t10.penup()
        self.t10.forward(80)
        self.t10.pendown()
        self.t10.left(135)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.left(90)
        self.t10.forward(20)
        self.t10.left(45)
        self.t10.forward(60)
        self.t10.left(45)
        self.t10.forward(20)
        self.t10.penup()
        if fill:
            self.t10.end_fill()
        self.t10.goto(xF, yF)
        self.t10.pendown()
        self.t10.setheading(rot2F)


    #jobb oldali másodperc
    def nulla(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(True)
        self.asdF(True)
        self.asdG(False)

    def egy(self):
        self.asd(False)
        self.asdB(True)
        self.asdC(True)
        self.asdD(False)
        self.asdE(False)
        self.asdF(False)
        self.asdG(False)

    def ketto(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(False)
        self.asdD(True)
        self.asdE(True)
        self.asdF(False)
        self.asdG(True)

    def harom(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(False)
        self.asdF(False)
        self.asdG(True)

    def negy(self):
        self.asd(False)
        self.asdB(True)
        self.asdC(True)
        self.asdD(False)
        self.asdE(False)
        self.asdF(True)
        self.asdG(True)

    def ot(self):
        self.asd(True)
        self.asdB(False)
        self.asdC(True)
        self.asdD(True)
        self.asdE(False)
        self.asdF(True)
        self.asdG(True)

    def hat(self):
        self.asd(True)
        self.asdB(False)
        self.asdC(True)
        self.asdD(True)
        self.asdE(True)
        self.asdF(True)
        self.asdG(True)

    def het(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(False)
        self.asdE(False)
        self.asdF(False)
        self.asdG(False)

    def nyolc(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(True)
        self.asdF(True)
        self.asdG(True)

    def kilenc(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(False)
        self.asdF(True)
        self.asdG(True)

    #bal oldali másodperc
    def nullasecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(True)
        self.asdG1(False)

    def egysecl(self):
        self.asd1(False)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(False)
        self.asdE1(False)
        self.asdF1(False)
        self.asdG1(False)

    def kettosecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(False)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(False)
        self.asdG1(True)

    def haromsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(False)
        self.asdF1(False)
        self.asdG1(True)

    def negysecl(self):
        self.asd1(False)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(False)
        self.asdE1(False)
        self.asdF1(True)
        self.asdG1(True)

    def otsecl(self):
        self.asd1(True)
        self.asdB1(False)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(False)
        self.asdF1(True)
        self.asdG1(True)

    def hatsecl(self):
        self.asd1(True)
        self.asdB1(False)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(True)
        self.asdG1(True)

    def hetsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(False)
        self.asdE1(False)
        self.asdF1(False)
        self.asdG1(False)

    def nyolcsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(True)
        self.asdG1(True)

    def kilencsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(False)
        self.asdF1(True)
        self.asdG1(True)


    #perc jobb oldali része
    def nullaminr(self):
        self.asd2(True)
        self.asdB2(True)
        self.asdC2(True)
        self.asdD2(True)
        self.asdE2(True)
        self.asdF2(True)
        self.asdG2(False)

    def egyminr(self):
        self.asd2(False)
        self.asdB2(True)
        self.asdC2(True)
        self.asdD2(False)
        self.asdE2(False)
        self.asdF2(False)
        self.asdG2(False)

    def kettominr(self):
        self.asd2(True)
        self.asdB2(True)
        self.asdC2(False)
        self.asdD2(True)
        self.asdE2(True)
        self.asdF2(False)
        self.asdG2(True)

    def haromminr(self):
        self.asd2(True)
        self.asdB2(True)
        self.asdC2(True)
        self.asdD2(True)
        self.asdE2(False)
        self.asdF2(False)
        self.asdG2(True)

    def negyminr(self):
        self.asd2(False)
        self.asdB2(True)
        self.asdC2(True)
        self.asdD2(False)
        self.asdE2(False)
        self.asdF2(True)
        self.asdG2(True)

    def otminr(self):
        self.asd2(True)
        self.asdB2(False)
        self.asdC2(True)
        self.asdD2(True)
        self.asdE2(False)
        self.asdF2(True)
        self.asdG2(True)

    def hatminr(self):
        self.asd2(True)
        self.asdB2(False)
        self.asdC2(True)
        self.asdD2(True)
        self.asdE2(True)
        self.asdF2(True)
        self.asdG2(True)

    def hetminr(self):
        self.asd2(True)
        self.asdB2(True)
        self.asdC2(True)
        self.asdD2(False)
        self.asdE2(False)
        self.asdF2(False)
        self.asdG2(False)

    def nyolcminr(self):
        self.asd2(True)
        self.asdB2(True)
        self.asdC2(True)
        self.asdD2(True)
        self.asdE2(True)
        self.asdF2(True)
        self.asdG2(True)

    def kilencminr(self):
        self.asd2(True)
        self.asdB2(True)
        self.asdC2(True)
        self.asdD2(True)
        self.asdE2(False)
        self.asdF2(True)
        self.asdG2(True)

    #perc jobb oldali része
    def nullaminl(self):
        self.asd3(True)
        self.asdB3(True)
        self.asdC3(True)
        self.asdD3(True)
        self.asdE3(True)
        self.asdF3(True)
        self.asdG3(False)

    def egyminl(self):
        self.asd3(False)
        self.asdB3(True)
        self.asdC3(True)
        self.asdD3(False)
        self.asdE3(False)
        self.asdF3(False)
        self.asdG3(False)

    def kettominl(self):
        self.asd3(True)
        self.asdB3(True)
        self.asdC3(False)
        self.asdD3(True)
        self.asdE3(True)
        self.asdF3(False)
        self.asdG3(True)

    def haromminl(self):
        self.asd3(True)
        self.asdB3(True)
        self.asdC3(True)
        self.asdD3(True)
        self.asdE3(False)
        self.asdF3(False)
        self.asdG3(True)

    def negyminl(self):
        self.asd3(False)
        self.asdB3(True)
        self.asdC3(True)
        self.asdD3(False)
        self.asdE3(False)
        self.asdF3(True)
        self.asdG3(True)

    def otminl(self):
        self.asd3(True)
        self.asdB3(False)
        self.asdC3(True)
        self.asdD3(True)
        self.asdE3(False)
        self.asdF3(True)
        self.asdG3(True)

    def hatminl(self):
        self.asd3(True)
        self.asdB3(False)
        self.asdC3(True)
        self.asdD3(True)
        self.asdE3(True)
        self.asdF3(True)
        self.asdG3(True)

    def hetminl(self):
        self.asd3(True)
        self.asdB3(True)
        self.asdC3(True)
        self.asdD3(False)
        self.asdE3(False)
        self.asdF3(False)
        self.asdG3(False)

    def nyolcminl(self):
        self.asd3(True)
        self.asdB3(True)
        self.asdC3(True)
        self.asdD3(True)
        self.asdE3(True)
        self.asdF3(True)
        self.asdG3(True)

    def kilencminl(self):
        self.asd3(True)
        self.asdB3(True)
        self.asdC3(True)
        self.asdD3(True)
        self.asdE3(False)
        self.asdF3(True)
        self.asdG3(True)

    #bal oldali óra
    def nullahourl(self):
        self.asd4(True)
        self.asdB4(True)
        self.asdC4(True)
        self.asdD4(True)
        self.asdE4(True)
        self.asdF4(True)
        self.asdG4(False)

    def egyhourl(self):
        self.asd4(False)
        self.asdB4(True)
        self.asdC4(True)
        self.asdD4(False)
        self.asdE4(False)
        self.asdF4(False)
        self.asdG4(False)

    def kettohourl(self):
        self.asd4(True)
        self.asdB4(True)
        self.asdC4(False)
        self.asdD4(True)
        self.asdE4(True)
        self.asdF4(False)
        self.asdG4(True)

    def haromhourl(self):
        self.asd4(True)
        self.asdB4(True)
        self.asdC4(True)
        self.asdD4(True)
        self.asdE4(False)
        self.asdF4(False)
        self.asdG4(True)

    def negyhourl(self):
        self.asd4(False)
        self.asdB4(True)
        self.asdC4(True)
        self.asdD4(False)
        self.asdE4(False)
        self.asdF4(True)
        self.asdG4(True)

    def othourl(self):
        self.asd4(True)
        self.asdB4(False)
        self.asdC4(True)
        self.asdD4(True)
        self.asdE4(False)
        self.asdF4(True)
        self.asdG4(True)

    def hathourl(self):
        self.asd4(True)
        self.asdB4(False)
        self.asdC4(True)
        self.asdD4(True)
        self.asdE4(True)
        self.asdF4(True)
        self.asdG4(True)

    def hethourl(self):
        self.asd4(True)
        self.asdB4(True)
        self.asdC4(True)
        self.asdD4(False)
        self.asdE4(False)
        self.asdF4(False)
        self.asdG4(False)

    def nyolchourl(self):
        self.asd4(True)
        self.asdB4(True)
        self.asdC4(True)
        self.asdD4(True)
        self.asdE4(True)
        self.asdF4(True)
        self.asdG4(True)

    def kilenchourl(self):
        self.asd4(True)
        self.asdB4(True)
        self.asdC4(True)
        self.asdD4(True)
        self.asdE4(False)
        self.asdF4(True)
        self.asdG4(True)

    #jobb oldali óra
    def nullahourr(self):
        self.asd5(True)
        self.asdB5(True)
        self.asdC5(True)
        self.asdD5(True)
        self.asdE5(True)
        self.asdF5(True)
        self.asdG5(False)

    def egyhourr(self):
        self.asd5(False)
        self.asdB5(True)
        self.asdC5(True)
        self.asdD5(False)
        self.asdE5(False)
        self.asdF5(False)
        self.asdG5(False)

    def kettohourr(self):
        self.asd5(True)
        self.asdB5(True)
        self.asdC5(False)
        self.asdD5(True)
        self.asdE5(True)
        self.asdF5(False)
        self.asdG5(True)

    def haromhourr(self):
        self.asd5(True)
        self.asdB5(True)
        self.asdC5(True)
        self.asdD5(True)
        self.asdE5(False)
        self.asdF5(False)
        self.asdG5(True)

    def negyhourr(self):
        self.asd5(False)
        self.asdB5(True)
        self.asdC5(True)
        self.asdD5(False)
        self.asdE5(False)
        self.asdF5(True)
        self.asdG5(True)

    def othourr(self):
        self.asd5(True)
        self.asdB5(False)
        self.asdC5(True)
        self.asdD5(True)
        self.asdE5(False)
        self.asdF5(True)
        self.asdG5(True)

    def hathourr(self):
        self.asd5(True)
        self.asdB5(False)
        self.asdC5(True)
        self.asdD5(True)
        self.asdE5(True)
        self.asdF5(True)
        self.asdG5(True)

    def hethourr(self):
        self.asd5(True)
        self.asdB5(True)
        self.asdC5(True)
        self.asdD5(False)
        self.asdE5(False)
        self.asdF5(False)
        self.asdG5(False)

    def nyolchourr(self):
        self.asd5(True)
        self.asdB5(True)
        self.asdC5(True)
        self.asdD5(True)
        self.asdE5(True)
        self.asdF5(True)
        self.asdG5(True)

    def kilenchourr(self):
        self.asd5(True)
        self.asdB5(True)
        self.asdC5(True)
        self.asdD5(True)
        self.asdE5(False)
        self.asdF5(True)
        self.asdG5(True)

    def pont1(self):
        self.t3.penup()
        self.t3.goto(220, -50)
        self.t3.pendown()
        self.t3.circle(25)

    def pont2(self):
        self.t4.penup()
        self.t4.goto(220, -200)
        self.t4.pendown()
        self.t4.circle(25)

    def pont11(self):
        self.t7.penup()
        self.t7.goto(-200, -50)
        self.t7.pendown()
        self.t7.circle(25)

    def pont22(self):
        self.t8.penup()
        self.t8.goto(-200, -200)
        self.t8.pendown()
        self.t8.circle(25)

    def kettospont(self):
        print("KETTOSPONT KESZ")
        if self.c.rightNumber(self.c.sec()) % 2==0:
            self.t3.clear()
            self.t4.clear()
        if self.c.rightNumber(self.c.sec()) % 2==1:
            self.t3.begin_fill()
            self.pont1()
            self.t3.end_fill()
            self.t4.begin_fill()
            self.pont2()
            self.t4.end_fill()

    def kettospont2(self):
        print("KETTOSPONT2 KESZ")
        if self.c.rightNumber(self.c.sec()) % 2==0:
            self.t7.clear()
            self.t8.clear()
        if self.c.rightNumber(self.c.sec()) % 2==1:
            self.t7.begin_fill()
            self.pont11()
            self.t7.end_fill()
            self.t8.begin_fill()
            self.pont22()
            self.t8.end_fill()

    def secondright(self):
        if self.c.rightNumber(self.c.sec()) == 0:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.nulla()
        if self.c.rightNumber(self.c.sec()) == 1:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.egy()
        if self.c.rightNumber(self.c.sec()) == 2:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.ketto()
        if self.c.rightNumber(self.c.sec()) == 3:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.harom()
        if self.c.rightNumber(self.c.sec()) == 4:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.negy()
        if self.c.rightNumber(self.c.sec()) == 5:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.ot()
        if self.c.rightNumber(self.c.sec()) == 6:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.hat()
        if self.c.rightNumber(self.c.sec()) == 7:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.het()
        if self.c.rightNumber(self.c.sec()) == 8:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.nyolc()
        if self.c.rightNumber(self.c.sec()) == 9:
            self.t.clear()
            self.t.penup()
            self.t.goto(450, 0)
            self.t.pendown()
            self.kilenc()

    def secondleft(self):
        if self.c.leftNumber(self.c.sec()) == 0:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.nullasecl()
        if self.c.leftNumber(self.c.sec()) == 1:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.egysecl()
        if self.c.leftNumber(self.c.sec()) == 2:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.kettosecl()
        if self.c.leftNumber(self.c.sec()) == 3:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.haromsecl()
        if self.c.leftNumber(self.c.sec()) == 4:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.negysecl()
        if self.c.leftNumber(self.c.sec()) == 5:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.otsecl()
        if self.c.leftNumber(self.c.sec()) == 6:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.hatsecl()
        if self.c.leftNumber(self.c.sec()) == 7:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.hetsecl()
        if self.c.leftNumber(self.c.sec()) == 8:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.nyolcsecl()
        if self.c.leftNumber(self.c.sec()) == 9:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(300, 0)
            self.t2.pendown()
            self.kilencsecl()

    def second(self):
        self.kettospont()
        self.kettospont2()
        self.secondleft()
        self.secondright()

    def minuteright(self):
        if self.c.rightNumber(self.c.min()) == 0:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.nullaminr()
        if self.c.rightNumber(self.c.min()) == 1:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.egyminr()
        if self.c.rightNumber(self.c.min()) == 2:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.kettominr()
        if self.c.rightNumber(self.c.min()) == 3:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.haromminr()
        if self.c.rightNumber(self.c.min()) == 4:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.negyminr()
        if self.c.rightNumber(self.c.min()) == 5:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.otminr()
        if self.c.rightNumber(self.c.min()) == 6:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.hatminr()
        if self.c.rightNumber(self.c.min()) == 7:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.hetminr()
        if self.c.rightNumber(self.c.min()) == 8:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.nyolcminr()
        if self.c.rightNumber(self.c.min()) == 9:
            self.t5.clear()
            self.t5.penup()
            self.t5.goto(50, 0)
            self.t5.pendown()
            self.kilencminr()

    def minuteleft(self):
        if self.c.leftNumber(self.c.min()) == 0:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.nullaminl()
        if self.c.leftNumber(self.c.min()) == 1:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.egyminl()
        if self.c.leftNumber(self.c.min()) == 2:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.kettominl()
        if self.c.leftNumber(self.c.min()) == 3:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.haromminl()
        if self.c.leftNumber(self.c.min()) == 4:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.negyminl()
        if self.c.leftNumber(self.c.min()) == 5:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.otminl()
        if self.c.leftNumber(self.c.min()) == 6:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.hatminl()
        if self.c.leftNumber(self.c.min()) == 7:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.hetminl()
        if self.c.leftNumber(self.c.min()) == 8:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.nyolcminl()
        if self.c.leftNumber(self.c.min()) == 9:
            self.t6.clear()
            self.t6.penup()
            self.t6.goto(-100, 0)
            self.t6.pendown()
            self.kilencminl()

    def minute(self):
        self.minuteleft()
        self.minuteright()

    def hourright(self):
        if self.c.rightNumber(self.c.hour24()) == 0:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.nullahourr()
        if self.c.rightNumber(self.c.hour24()) == 1:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.egyhourr()
        if self.c.rightNumber(self.c.hour24()) == 2:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.kettohourr()
        if self.c.rightNumber(self.c.hour24()) == 3:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.haromhourr()
        if self.c.rightNumber(self.c.hour24()) == 4:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.negyhourr()
        if self.c.rightNumber(self.c.hour24()) == 5:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.othourr()
        if self.c.rightNumber(self.c.hour24()) == 6:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.hathourr()
        if self.c.rightNumber(self.c.hour24()) == 7:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.hethourr()
        if self.c.rightNumber(self.c.hour24()) == 8:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.nyolchourr()
        if self.c.rightNumber(self.c.hour24()) == 9:
            self.t10.clear()
            self.t10.penup()
            self.t10.goto(-350, 0)
            self.t10.pendown()
            self.kilenchourr()

    def hourleft(self):
        if self.c.leftNumber(self.c.hour24()) == 0:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.nullahourl()
        if self.c.leftNumber(self.c.hour24()) == 1:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.egyhourl()
        if self.c.leftNumber(self.c.hour24()) == 2:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.kettohourl()
        if self.c.leftNumber(self.c.hour24()) == 3:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.haromhourl()
        if self.c.leftNumber(self.c.hour24()) == 4:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.negyhourl()
        if self.c.leftNumber(self.c.hour24()) == 5:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.othourl()
        if self.c.leftNumber(self.c.hour24()) == 6:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.hathourl()
        if self.c.leftNumber(self.c.hour24()) == 7:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.hethourl()
        if self.c.leftNumber(self.c.hour24()) == 8:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.nyolchourl()
        if self.c.leftNumber(self.c.hour24()) == 9:
            self.t9.clear()
            self.t9.penup()
            self.t9.goto(-500, 0)
            self.t9.pendown()
            self.kilenchourl()

    def hour(self):
        self.hourleft()
        self.hourright()

    def __init__(self):
        self.t.fillcolor("orange")
        self.t2.fillcolor("orange")
        self.t3.fillcolor("orange")
        self.t4.fillcolor("orange")
        self.t5.fillcolor("orange")
        self.t6.fillcolor("orange")
        self.t7.fillcolor("orange")
        self.t8.fillcolor("orange")
        self.t9.fillcolor("orange")
        self.t10.fillcolor("orange")
        self.scr.bgcolor("black")
        self.t._delay(0)
        self.t.speed(0)
        self.scr.setup(1600,900)
        self.c.setOnHourChangeListener(self.hour)
        self.c.setOnMinuteChangeListener(self.minute)
        self.c.setOnSecondChangeListener(self.second)
        self.scr.mainloop()

Kattintgato()