from turtle import *
from j_clock import Clock

class Kattintgato:

    scr = Screen()
    t = Turtle()
    t2 = Turtle()
    c = Clock(scr)

    def asd(self, fill:bool):
        xA = self.t.xcor()
        yA = self.t.ycor()
        rotA = self.t.heading()
        self.t.penup()
        self.t.forward(-7)
        self.t.right(90)
        self.t.forward(5)
        self.t.left(90)
        self.t.forward(80)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        if fill:
            self.t.end_fill()
        self.t.penup()
        self.t.goto(xA, yA)
        self.t.setheading(rotA)
        self.t.pendown()

    def asdB(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.setheading(-90)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xB = self.t.xcor()
        yB = self.t.ycor()
        rotB = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xB, yB)
        self.t.pendown()
        self.t.setheading(rotB)

    def asdC(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.setheading(-90)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xC = self.t.xcor()
        yC = self.t.ycor()
        rotC = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xC, yC)
        self.t.pendown()
        self.t.setheading(rotC)

    def asdD(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.forward(5)
        self.t.setheading(180)
        self.t.forward(15)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xD = self.t.xcor()
        yD = self.t.ycor()
        rotD = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xD, yD)
        self.t.pendown()
        self.t.setheading(rotD)

    def asdE(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.forward(5)
        self.t.setheading(90)
        self.t.forward(15)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xE = self.t.xcor()
        yE = self.t.ycor()
        rotE = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xE, yE)
        self.t.pendown()
        self.t.setheading(rotE)

    def asdF(self, fill:bool):
        self.t.penup()
        self.t.forward(20)
        self.t.forward(80)
        self.t.setheading(90)
        self.t.forward(-3)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xF = self.t.xcor()
        yF = self.t.ycor()
        rotF = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xF, yF)
        self.t.pendown()
        self.t.setheading(rotF)

    def asdG(self, fill:bool):
        self.t.penup()
        self.t.setheading(0)
        self.t.forward(-5)
        self.t.setheading(-90)
        self.t.forward(15)
        self.t.setheading(0)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xF = self.t.xcor()
        yF = self.t.ycor()
        rotF = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xF, yF)
        self.t.pendown()
        self.t.setheading(rotF)


    def asd2(self):
        self.t2.fillcolor("green")
        self.t2.begin_fill()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.end_fill()

    #def asd2(self):
        #for i in range(3):
            #self.t.left(135)
            #self.t.forward(100)
            #self.t.left(90)

    #def asd3(self):
        #self.t.right(135)
        #self.asd()

    def nulla(self):
        self.asd(True)
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdD()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdE()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdF()
        self.t.end_fill()
        self.asdG()

    def egy(self):
        self.asd()
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.asdD()
        self.asdE()
        self.asdF()
        self.asdG()

    def ketto(self):
        self.t.begin_fill()
        self.asd()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.asdC()
        self.t.begin_fill()
        self.asdD()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdE()
        self.t.end_fill()
        self.asdF()
        self.t.begin_fill()
        self.asdG()
        self.t.end_fill()

    def harom(self):
        self.t.begin_fill()
        self.asd()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdD()
        self.t.end_fill()
        self.asdE()
        self.asdF()
        self.t.begin_fill()
        self.asdG()
        self.t.end_fill()

    def negy(self):
        self.asd()
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.asdD()
        self.asdE()
        self.t.begin_fill()
        self.asdF()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdG()
        self.t.end_fill()

    def ot(self):
        self.t.begin_fill()
        self.asd()
        self.t.end_fill()
        self.asdB()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdD()
        self.t.end_fill()
        self.asdE()
        self.t.begin_fill()
        self.asdF()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdG()
        self.t.end_fill()

    def hat(self):
        self.t.begin_fill()
        self.asd()
        self.t.end_fill()
        self.asdB()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdD()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdE()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdF()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdG()
        self.t.end_fill()

    def het(self):
        self.t.begin_fill()
        self.asd()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.asdD()
        self.asdE()
        self.asdF()
        self.asdG()

    def nyolc(self):
        self.t.begin_fill()
        self.asd()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdD()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdE()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdF()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdG()
        self.t.end_fill()

    def kilenc(self):
        self.t.begin_fill()
        self.asd()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdB()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdC()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdD()
        self.t.end_fill()
        self.asdE()
        self.t.begin_fill()
        self.asdF()
        self.t.end_fill()
        self.t.begin_fill()
        self.asdG()
        self.t.end_fill()

    def secondright(self):
        if self.c.rightNumber(self.c.sec()) == 0:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(250, -150)
            self.t2.pendown()
            self.nulla()
        if self.c.rightNumber(self.c.sec()) == 1:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.egy()
        if self.c.rightNumber(self.c.sec()) == 2:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.ketto()
        if self.c.rightNumber(self.c.sec()) == 3:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.harom()
        if self.c.rightNumber(self.c.sec()) == 4:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.negy()
        if self.c.rightNumber(self.c.sec()) == 5:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.ot()
        if self.c.rightNumber(self.c.sec()) == 6:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.hat()
        if self.c.rightNumber(self.c.sec()) == 7:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.het()
        if self.c.rightNumber(self.c.sec()) == 8:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.nyolc()
        if self.c.rightNumber(self.c.sec()) == 9:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(150, -50)
            self.t2.pendown()
            self.kilenc()

    def secondleft(self):
        if self.c.leftNumber(self.c.sec()) == 0:
            self.t.clear()
            self.nulla()
        if self.c.leftNumber(self.c.sec()) == 1:
            self.t.clear()
            self.egy()
        if self.c.leftNumber(self.c.sec()) == 2:
            self.t.clear()
            self.ketto()
        if self.c.leftNumber(self.c.sec()) == 3:
            self.t.clear()
            self.harom()
        if self.c.leftNumber(self.c.sec()) == 4:
            self.t.clear()
            self.negy()
        if self.c.leftNumber(self.c.sec()) == 5:
            self.t.clear()
            self.ot()
        if self.c.leftNumber(self.c.sec()) == 6:
            self.t.clear()
            self.hat()
        if self.c.leftNumber(self.c.sec()) == 7:
            self.t.clear()
            self.het()
        if self.c.leftNumber(self.c.sec()) == 8:
            self.t.clear()
            self.nyolc()
        if self.c.leftNumber(self.c.sec()) == 9:
            self.t.clear()
            self.kilenc()

    def second(self):
        self.secondleft()
        self.secondright()

    def __init__(self):
        self.t.fillcolor("green")
        self.t._delay(0)
        self.t.speed(0)
        self.nulla()
        #self.c.setOnSecondChangeListener(self.second)
        #self.asd()
        #self.asdB()
        #self.asdC()
        #self.asdD()
        #self.asdE()
        #self.asdF()
        #self.asdG()
        self.scr.mainloop()

Kattintgato()