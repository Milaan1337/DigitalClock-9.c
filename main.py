from turtle import *
from j_clock import Clock

class Kattintgato:

    scr = Screen()
    t = Turtle()
    t2 = Turtle()
    t3 = Turtle()
    t4 = Turtle()
    c = Clock(scr)

    def asd(self, fill:bool):
        xA = self.t.xcor()
        yA = self.t.ycor()
        rotA = self.t.heading()
        self.t.penup()
        self.t.forward(-7)
        self.t.right(90)
        self.t.forward(5)
        self.t.left(90)
        self.t.forward(80)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        if fill:
            self.t.end_fill()
        self.t.penup()
        self.t.goto(xA, yA)
        self.t.setheading(rotA)
        self.t.pendown()

    def asdB(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.setheading(-90)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xB = self.t.xcor()
        yB = self.t.ycor()
        rotB = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xB, yB)
        self.t.pendown()
        self.t.setheading(rotB)

    def asdC(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.setheading(-90)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xC = self.t.xcor()
        yC = self.t.ycor()
        rotC = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xC, yC)
        self.t.pendown()
        self.t.setheading(rotC)

    def asdD(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.forward(5)
        self.t.setheading(180)
        self.t.forward(15)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xD = self.t.xcor()
        yD = self.t.ycor()
        rotD = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xD, yD)
        self.t.pendown()
        self.t.setheading(rotD)

    def asdE(self, fill:bool):
        self.t.penup()
        self.t.forward(80)
        self.t.forward(5)
        self.t.setheading(90)
        self.t.forward(15)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xE = self.t.xcor()
        yE = self.t.ycor()
        rotE = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xE, yE)
        self.t.pendown()
        self.t.setheading(rotE)

    def asdF(self, fill:bool):
        self.t.penup()
        self.t.forward(20)
        self.t.forward(80)
        self.t.setheading(90)
        self.t.forward(-3)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xF = self.t.xcor()
        yF = self.t.ycor()
        rotF = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xF, yF)
        self.t.pendown()
        self.t.setheading(rotF)

    def asdG(self, fill:bool):
        self.t.penup()
        self.t.setheading(0)
        self.t.forward(-5)
        self.t.setheading(-90)
        self.t.forward(15)
        self.t.setheading(0)
        self.t.forward(20)
        self.t.pendown()
        if fill:
            self.t.begin_fill()
        xF = self.t.xcor()
        yF = self.t.ycor()
        rotF = self.t.heading()
        self.t.penup()
        self.t.forward(80)
        self.t.pendown()
        self.t.left(135)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.left(90)
        self.t.forward(20)
        self.t.left(45)
        self.t.forward(60)
        self.t.left(45)
        self.t.forward(20)
        self.t.penup()
        if fill:
            self.t.end_fill()
        self.t.goto(xF, yF)
        self.t.pendown()
        self.t.setheading(rotF)



    def asd1(self, fill:bool):
        xA = self.t2.xcor()
        yA = self.t2.ycor()
        rot2A = self.t2.heading()
        self.t2.penup()
        self.t2.forward(-7)
        self.t2.right(90)
        self.t2.forward(5)
        self.t2.left(90)
        self.t2.forward(80)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        if fill:
            self.t2.end_fill()
        self.t2.penup()
        self.t2.goto(xA, yA)
        self.t2.setheading(rot2A)
        self.t2.pendown()

    def asdB1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.setheading(-90)
        self.t2.forward(20)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xB = self.t2.xcor()
        yB = self.t2.ycor()
        rot2B = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xB, yB)
        self.t2.pendown()
        self.t2.setheading(rot2B)

    def asdC1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.setheading(-90)
        self.t2.forward(20)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xC = self.t2.xcor()
        yC = self.t2.ycor()
        rot2C = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xC, yC)
        self.t2.pendown()
        self.t2.setheading(rot2C)

    def asdD1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.forward(5)
        self.t2.setheading(180)
        self.t2.forward(15)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xD = self.t2.xcor()
        yD = self.t2.ycor()
        rot2D = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xD, yD)
        self.t2.pendown()
        self.t2.setheading(rot2D)

    def asdE1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(80)
        self.t2.forward(5)
        self.t2.setheading(90)
        self.t2.forward(15)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xE = self.t2.xcor()
        yE = self.t2.ycor()
        rot2E = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xE, yE)
        self.t2.pendown()
        self.t2.setheading(rot2E)

    def asdF1(self, fill:bool):
        self.t2.penup()
        self.t2.forward(20)
        self.t2.forward(80)
        self.t2.setheading(90)
        self.t2.forward(-3)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xF = self.t2.xcor()
        yF = self.t2.ycor()
        rot2F = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xF, yF)
        self.t2.pendown()
        self.t2.setheading(rot2F)

    def asdG1(self, fill:bool):
        self.t2.penup()
        self.t2.setheading(0)
        self.t2.forward(-5)
        self.t2.setheading(-90)
        self.t2.forward(15)
        self.t2.setheading(0)
        self.t2.forward(20)
        self.t2.pendown()
        if fill:
            self.t2.begin_fill()
        xF = self.t2.xcor()
        yF = self.t2.ycor()
        rot2F = self.t2.heading()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.penup()
        if fill:
            self.t2.end_fill()
        self.t2.goto(xF, yF)
        self.t2.pendown()
        self.t2.setheading(rot2F)

    def asd2(self):
        self.t2.fillcolor("green")
        self.t2.begin_fill()
        self.t2.penup()
        self.t2.forward(80)
        self.t2.pendown()
        self.t2.left(135)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.left(90)
        self.t2.forward(20)
        self.t2.left(45)
        self.t2.forward(60)
        self.t2.left(45)
        self.t2.forward(20)
        self.t2.end_fill()

    def nulla(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(True)
        self.asdF(True)
        self.asdG(False)

    def egy(self):
        self.asd(False)
        self.asdB(True)
        self.asdC(True)
        self.asdD(False)
        self.asdE(False)
        self.asdF(False)
        self.asdG(False)

    def ketto(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(False)
        self.asdD(True)
        self.asdE(True)
        self.asdF(False)
        self.asdG(True)

    def harom(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(False)
        self.asdF(False)
        self.asdG(True)

    def negy(self):
        self.asd(False)
        self.asdB(True)
        self.asdC(True)
        self.asdD(False)
        self.asdE(False)
        self.asdF(True)
        self.asdG(True)

    def ot(self):
        self.asd(True)
        self.asdB(False)
        self.asdC(True)
        self.asdD(True)
        self.asdE(False)
        self.asdF(True)
        self.asdG(True)

    def hat(self):
        self.asd(True)
        self.asdB(False)
        self.asdC(True)
        self.asdD(True)
        self.asdE(True)
        self.asdF(True)
        self.asdG(True)

    def het(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(False)
        self.asdE(False)
        self.asdF(False)
        self.asdG(False)

    def nyolc(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(True)
        self.asdF(True)
        self.asdG(True)

    def kilenc(self):
        self.asd(True)
        self.asdB(True)
        self.asdC(True)
        self.asdD(True)
        self.asdE(False)
        self.asdF(True)
        self.asdG(True)


    def nullasecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(True)
        self.asdG1(False)

    def egysecl(self):
        self.asd1(False)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(False)
        self.asdE1(False)
        self.asdF1(False)
        self.asdG1(False)

    def kettosecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(False)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(False)
        self.asdG1(True)

    def haromsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(False)
        self.asdF1(False)
        self.asdG1(True)

    def negysecl(self):
        self.asd1(False)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(False)
        self.asdE1(False)
        self.asdF1(True)
        self.asdG1(True)

    def otsecl(self):
        self.asd1(True)
        self.asdB1(False)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(False)
        self.asdF1(True)
        self.asdG1(True)

    def hatsecl(self):
        self.asd1(True)
        self.asdB1(False)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(True)
        self.asdG1(True)

    def hetsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(False)
        self.asdE1(False)
        self.asdF1(False)
        self.asdG1(False)

    def nyolcsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(True)
        self.asdF1(True)
        self.asdG1(True)

    def kilencsecl(self):
        self.asd1(True)
        self.asdB1(True)
        self.asdC1(True)
        self.asdD1(True)
        self.asdE1(False)
        self.asdF1(True)
        self.asdG1(True)

    def pont1(self):
        self.t3.penup()
        self.t3.goto(120, -50)
        self.t3.pendown()
        self.t3.circle(25)

    def pont2(self):
        self.t4.penup()
        self.t4.goto(120, -200)
        self.t4.pendown()
        self.t4.circle(25)

    def kettospont(self):
        print("KETTOSPONT KESZ")
        if self.c.rightNumber(self.c.sec()) % 2==0:
            self.t3.clear()
            self.t4.clear()
        if self.c.rightNumber(self.c.sec()) % 2==1:
            self.t3.begin_fill()
            self.pont1()
            self.t3.end_fill()
            self.t4.begin_fill()
            self.pont2()
            self.t4.end_fill()

    def secondright(self):
        if self.c.rightNumber(self.c.sec()) == 0:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.nulla()
        if self.c.rightNumber(self.c.sec()) == 1:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.egy()
        if self.c.rightNumber(self.c.sec()) == 2:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.ketto()
        if self.c.rightNumber(self.c.sec()) == 3:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.harom()
        if self.c.rightNumber(self.c.sec()) == 4:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.negy()
        if self.c.rightNumber(self.c.sec()) == 5:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.ot()
        if self.c.rightNumber(self.c.sec()) == 6:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.hat()
        if self.c.rightNumber(self.c.sec()) == 7:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.het()
        if self.c.rightNumber(self.c.sec()) == 8:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.nyolc()
        if self.c.rightNumber(self.c.sec()) == 9:
            self.t.clear()
            self.t.penup()
            self.t.goto(350, 0)
            self.t.pendown()
            self.kilenc()

    def secondleft(self):
        if self.c.leftNumber(self.c.sec()) == 0:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.nullasecl()
        if self.c.leftNumber(self.c.sec()) == 1:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.egysecl()
        if self.c.leftNumber(self.c.sec()) == 2:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.kettosecl()
        if self.c.leftNumber(self.c.sec()) == 3:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.haromsecl()
        if self.c.leftNumber(self.c.sec()) == 4:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.negysecl()
        if self.c.leftNumber(self.c.sec()) == 5:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.otsecl()
        if self.c.leftNumber(self.c.sec()) == 6:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.hatsecl()
        if self.c.leftNumber(self.c.sec()) == 7:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.hetsecl()
        if self.c.leftNumber(self.c.sec()) == 8:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.nyolcsecl()
        if self.c.leftNumber(self.c.sec()) == 9:
            self.t2.clear()
            self.t2.penup()
            self.t2.goto(200, 0)
            self.t2.pendown()
            self.kilencsecl()

    def second(self):
        self.kettospont()
        self.secondleft()
        self.secondright()

    def __init__(self):
        self.t.fillcolor("green")
        self.t2.fillcolor("green")
        self.t3.fillcolor("green")
        self.t4.fillcolor("green")
        self.scr.bgcolor("black")
        self.t._delay(0)
        self.t.speed(0)
        self.c.setOnSecondChangeListener(self.second)
        self.scr.mainloop()

Kattintgato()